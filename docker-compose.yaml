# docker-compose.yml
version: '3.8'

services:
  web:
    build:
      context: ./users
      dockerfile: Dockerfile
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; uvicorn users.main:app --host 0.0.0.0 --port 8000'
    volumes:
      - .:/users
    ports:
      - 8000:8000
    environment:
      - DATABASE_URL=postgresql://fastapi_traefik:fastapi_traefik@db:5432/fastapi_traefik
    depends_on:
      - db
      - kafka-setup
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    command: 'uvicorn gateway.main:app --host 0.0.0.0 --port 9200'
    volumes:
      - .:/gateway
    ports:
      - 9200:9200
    environment:
      BACKEND_APP_ADDRESS: web:8000
      POSTS_STORAGE_ADDRESS: 0.0.0.0:50051
    depends_on:
      - web
      - storage
      - kafka-setup

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    command: bash -c 'while !</dev/tcp/storage_db/5433; do sleep 1; done; python3 storage/main.py'
    volumes:
      - .:/storage
    ports:
      - 50051:50051
    environment:
      - DATABASE_URL=postgresql://fastapi_traefik:fastapi_traefik@storage_db:5433/fastapi_traefik
    depends_on:
      - storage_db

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=fastapi_traefik
      - POSTGRES_PASSWORD=fastapi_traefik
      - POSTGRES_DB=fastapi_traefik

  storage_db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5433
    ports:
      - "5433:5433"
    environment:
      - POSTGRES_USER=fastapi_traefik
      - POSTGRES_PASSWORD=fastapi_traefik
      - POSTGRES_DB=fastapi_traefik
      - PGPORT=5433
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:29092 1 30 &&
        echo 'Creating topics...' &&
        kafka-topics --create --if-not-exists --topic registrations --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic likes --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic views --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic comments --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        echo 'Topics created successfully'
      "

volumes:
  postgres_data:
